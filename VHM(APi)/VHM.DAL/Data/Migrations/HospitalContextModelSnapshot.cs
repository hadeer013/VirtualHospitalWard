// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VHM.DAL.Data;

namespace VHM.DAL.Data.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VHM.DAL.Entities.Ambulance.AmbulanceCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AmbulanceCalls");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ChatEntities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contetnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ChatEntities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("RecieverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ChatEntities.UserWithConnectionId", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.ToTable("UserWithConnectionIds");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ConsultaTask.ConsultaionTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("To")
                        .HasColumnType("int");

                    b.Property<string>("UserInitializerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRecieverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserInitializerId");

                    b.HasIndex("UserRecieverId");

                    b.ToTable("consultaionTasks");
                });

            modelBuilder.Entity("VHM.DAL.Entities.DevicesEntities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique()
                        .HasFilter("[PatientId] IS NOT NULL");

                    b.HasIndex("PatientId1")
                        .IsUnique()
                        .HasFilter("[PatientId1] IS NOT NULL");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("VHM.DAL.Entities.DoctorEntities.UserWithSavedPatient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId", "UserId");

                    b.ToTable("savedPatients");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RateValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.SupportMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("supportMessages");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("DiseaseFeatures");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.Readings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AvgBPM")
                        .HasColumnType("real");

                    b.Property<float>("BPM")
                        .HasColumnType("real");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("VHM.DAL.Entities.Admin", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ApplicationUser");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("VHM.DAL.Entities.DoctorEntities.Doctor", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ApplicationUser");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Patient", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ApplicationUser");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiseaseFeaturesId")
                        .HasColumnType("int");

                    b.Property<string>("PatientStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DiseaseFeaturesId")
                        .IsUnique()
                        .HasFilter("[DiseaseFeaturesId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VHM.DAL.Entities.Staff", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ApplicationUser");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.BrainStroke", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures");

                    b.Property<float>("AvgGlucose")
                        .HasColumnType("real");

                    b.Property<float>("BMI")
                        .HasColumnType("real");

                    b.Property<int>("HeartDisease")
                        .HasColumnType("int");

                    b.Property<float>("Hypertension")
                        .HasColumnType("real");

                    b.ToTable("BrainStroke");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.Cardiovascular", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures");

                    b.Property<float>("Ap_hi")
                        .HasColumnType("real");

                    b.Property<float>("Ap_lo")
                        .HasColumnType("real");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("real");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.ToTable("Cardiovascular");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.DiabetsFeatures", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures");

                    b.Property<float>("BMI")
                        .HasColumnType("real");

                    b.Property<float>("Glucose")
                        .HasColumnType("real");

                    b.Property<float>("Insulin")
                        .HasColumnType("real");

                    b.Property<float>("SkinThickness")
                        .HasColumnType("real");

                    b.ToTable("DiabetsFeatures");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.KidneyFeatures", b =>
                {
                    b.HasBaseType("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures");

                    b.Property<float>("Albumin")
                        .HasColumnType("real");

                    b.Property<float>("BloodUrea")
                        .HasColumnType("real");

                    b.Property<float>("BloodglucoseRandom")
                        .HasColumnType("real");

                    b.Property<float>("Haemoglobin")
                        .HasColumnType("real");

                    b.Property<float>("Hypertension")
                        .HasColumnType("real");

                    b.Property<float>("PackedCellVolume")
                        .HasColumnType("real");

                    b.Property<float>("SerumCreatinine")
                        .HasColumnType("real");

                    b.Property<float>("Sugar")
                        .HasColumnType("real");

                    b.Property<float>("whiteBloodCellCount")
                        .HasColumnType("real");

                    b.ToTable("KidneyFeatures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.Ambulance.AmbulanceCall", b =>
                {
                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.OwnsOne("VHM.DAL.Entities.Ambulance.PatientLocation", "Location", b1 =>
                        {
                            b1.Property<int>("AmbulanceCallId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("AmbulanceCallId");

                            b1.ToTable("AmbulanceCalls");

                            b1.WithOwner()
                                .HasForeignKey("AmbulanceCallId");
                        });

                    b.Navigation("Location");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ChatEntities.Message", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("VHM.DAL.Entities.ApplicationUser", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ChatEntities.Notification", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ConsultaTask.ConsultaionTask", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", "UserInitializer")
                        .WithMany()
                        .HasForeignKey("UserInitializerId");

                    b.HasOne("VHM.DAL.Entities.ApplicationUser", "UserReciever")
                        .WithMany()
                        .HasForeignKey("UserRecieverId");

                    b.Navigation("UserInitializer");

                    b.Navigation("UserReciever");
                });

            modelBuilder.Entity("VHM.DAL.Entities.DevicesEntities.Device", b =>
                {
                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.DevicesEntities.Device", "PatientId");

                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", null)
                        .WithOne("Device")
                        .HasForeignKey("VHM.DAL.Entities.DevicesEntities.Device", "PatientId1");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.FeedBack", b =>
                {
                    b.HasOne("VHM.DAL.Entities.DoctorEntities.Doctor", null)
                        .WithMany("FeedBacks")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany("FeedBacks")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Prescription", b =>
                {
                    b.HasOne("VHM.DAL.Entities.DoctorEntities.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Report", b =>
                {
                    b.HasOne("VHM.DAL.Entities.DoctorEntities.Doctor", "Doctor")
                        .WithMany("Reports")
                        .HasForeignKey("DoctorId");

                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany("Reports")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.SupportMessages", b =>
                {
                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany("SupportMessages")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.Readings", b =>
                {
                    b.HasOne("VHM.DAL.Entities.PatientEntities.Patient", "Patient")
                        .WithMany("Readings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.Admin", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.DoctorEntities.Doctor", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.DoctorEntities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Patient", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", "DiseaseFeatures")
                        .WithOne("Patient")
                        .HasForeignKey("VHM.DAL.Entities.PatientEntities.Patient", "DiseaseFeaturesId");

                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.PatientEntities.Patient", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("DiseaseFeatures");
                });

            modelBuilder.Entity("VHM.DAL.Entities.Staff", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.Staff", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.BrainStroke", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.ReadingEntities.BrainStroke", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.Cardiovascular", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.ReadingEntities.Cardiovascular", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.DiabetsFeatures", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.ReadingEntities.DiabetsFeatures", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.KidneyFeatures", b =>
                {
                    b.HasOne("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", null)
                        .WithOne()
                        .HasForeignKey("VHM.DAL.Entities.ReadingEntities.KidneyFeatures", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VHM.DAL.Entities.ReadingEntities.DiseaseFeatures", b =>
                {
                    b.Navigation("Patient");
                });

            modelBuilder.Entity("VHM.DAL.Entities.DoctorEntities.Doctor", b =>
                {
                    b.Navigation("FeedBacks");

                    b.Navigation("Prescriptions");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("VHM.DAL.Entities.PatientEntities.Patient", b =>
                {
                    b.Navigation("Device");

                    b.Navigation("FeedBacks");

                    b.Navigation("Prescriptions");

                    b.Navigation("Readings");

                    b.Navigation("Reports");

                    b.Navigation("SupportMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
